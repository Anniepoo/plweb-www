---+ How do I upload a file, preserving the file-name?

NOTE: This example required SWI-Prolog 5.11.32 or 5.10.6 or the current
GIT version of library(http/http_mime_plugin).

The way to preserve the user-entered file-name is to use a form with
=enctype= =|multipart/form-data|= and =input= element of type =file=.
This causes a browser to formulate a MIME encoded POST request that
contains the filename.

First, let us import the required HTTP libraries and create the server:

  ==
  :- module(upload, [ run/0]).
  :- use_module(library(http/thread_httpd)).
  :- use_module(library(http/http_dispatch)).
  :- use_module(library(http/http_parameters)).
  :- use_module(library(http/http_mime_plugin)).
  :- use_module(library(http/http_client)).
  :- use_module(library(http/html_write)).
  :- use_module(library(lists)).

  :- http_handler(root(.),	upload_form, []).
  :- http_handler(root(upload),	upload,      []).

  run :-
	  http_server(http_dispatch, [port(8080)]).
  ==

Next step, we create the form by defining the implementation for
upload_form/1:

  ==
  upload_form(_Request) :-
	  reply_html_page(
	      title('Upload a file'),
	      [ h1('Upload a file'),
		form([ method('POST'),
		       action(location_by_id(upload)),
		       enctype('multipart/form-data')
		     ],
		     table([],
			   [ tr([td(input([type(file), name(file)]))]),
			     tr([td(align(right),
				    input([type(submit), value('Upload!')]))])
			   ]))
	      ]).
  ==

Next step, we must defined upload/1. Unfortunately, we cannot use the
simple http_parameters/2 to obtain the data because this interface only
provides the name and value of parameters.  Instead, we must use
http_read_data/3.  First we validate the request to be a POST, because
otherwise http_read_data/3 is invalid. The http_read_data/3 call
inherits functionality from library(http/http_mime_plugin) to read
MIME messages.  By default, it translates =|multipart/form-data|=
into a list of Name=Value, but using the option form_data(mime) it
preserves the original representation of mime_parse/2.

If anything goes wrong, we throw the error
http_reply(bad_request(Culprit)), where the Culprit is a Prolog term
describing the problem.  This will be matched to a clean message in the
next section.

  ==
  upload(Request) :-
	  (   memberchk(method(post), Request),
	      http_read_data(Request, Parts, [form_data(mime)]),
	      member(mime(Attributes, Data, []), Parts),
	      memberchk(name(file), Attributes),
	      memberchk(filename(Target), Attributes)
	  ->  % process file here; this demo just prints the info gathered
	      atom_length(Data, Len),
	      format('Content-type: text/plain~n~n'),
	      format('Need to store ~D characters into file \'~w\'~n',
		     [ Len, Target ])
	  ;   throw(http_reply(bad_request(bad_file_upload)))
	  ).

  ==

Finally, we must translate =bad_file_upload= into a clean message.  We
do this using the DCG rule prolog:message//1:

==
:- multifile prolog:message//1.

prolog:message(bad_file_upload) -->
	[ 'A file upload must be submitted as multipart/form-data using', nl,
	  'name=file and providing a file-name'
	].
==

@see  You can download the complete code from demo_upload_file.pl.
@see  [[GIT version of HTTP MIME plugin][http://www.swi-prolog.org/git/packages/http.git/blob/HEAD:/http_mime_plugin.pl]].
      Must be dropped into the Prolog library to use this functionality
      on versions before 5.11.32 or 5.10.6.
