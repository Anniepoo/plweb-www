---+ SWI-Prolog Roadmap

September 2015 

We've only just realized we should have a formal roadmap. Expect this to change significantly in the near future.

---++ Why create a roadmap?

  * It gives users a sense of where we're going
    Commercial and academic users have some sense whether the feature they need will be implemented any time soon.
  * It helps focus development
    It helps core developers understand what areas are important, and helps 'cool idea' projects align with the main thrust of development. It gives us direction - we don't start projects and drift away from them.
  * New developers have a place to start.
    New developers wondering how they can get started know what's going on
  * It gives a sense of accomplishment
    We can see where we've been and what we've accomplished. We know we're not just on a never ending merry-go-round
  * Users can see what's needed
    Users who see that a piece of code just needs someone to write it are more likely to become developers.
  * Making the map creates consensus
    The discussion leading to a roadmap 
  * Development work serves project goals
    If Prolog programmers are ever going to be in demand, we have to do some inherently less interesting bits of coding. 

---++ Roadmap items

Jan Wielemaker and Anne Ogborn each produced a roadmap recently. We're posting them until we have consensus.

---+++ Jan's

  * Web based IDE
  * Towards tabling: delimited continuations and tries data structures
  * Sort out proper compilation of last-call optimization in the ZIP
    VM (Bart gave me some ideas).
  * (Voluntary, partial) typing and static analysis
  * Web issues: HTTP 2.0, SOAP, Oauth, HTTPS (making it usable for
    non-gods), ...
  * Social network login plugin (now only Google)
  * Tutorials/book
  * Enhance annotation/discussion on website (allow commenting on
    annotations, hide down voted comments, etc).  Could be a proper
    library.
  

---+++ Annie's

1. We are trying to increase our mainstream user base and visibility within mainstream computing. This includes the following steps:
   * Improve our out-of-box experience. This step has been completed.
   * Improve the quality of our online documentation through the SWI-Prolog website. This step has been completed, and additionally has resulted in the very nice pldoc literate programming system.
   * Disseminate knowledge of how to do SWI-Prolog programming in the large by writing an online interactive tutorial system and a book. The code portion of this system is well along in development, but the content is needed.
   * Increase legitimacy by continuing our efforts to be visible at conferences and by creating a published print book.
   * Identify and create a 'killer app' similar to the way Rails made Ruby famous and unix made C famous.
   * Encourage and support an initial set of commercial developers.
2. Last year Torbjorn Lager developed the pengines system that allows Prolog code to execute remotely with little more ceremony than executing locally, including from a web page. This system dramatically reduces the complexity of web programming, and has positioned us for #3
3. We have a well liked but aging X windows based IDE. Using #2, we wish to create a new IDE, based entirely within the browser, and which is designed to be collaborative from the start, so programmers can remotely pair program. Additionally, the current IDE's appearance is rather old fashioned, and this discourages newcomers.
4. Continue to improve our lead in RDF handling.
5. Improve TCO detection in the ZIP interpreter
6. Improve usability of HTTP 2.0, SOAP, Oauth, and HTTPS libraries
7. Social network login plugin (now only Google)
8. Enhance annotation/discussion on website 


